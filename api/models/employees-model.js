const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const mailer = require("nodemailer");
const generator = require('generate-password');

const EmployeeSchema = new mongoose.Schema({
    firstName: {
        type: String,
        required: [true, 'First name is Required'],
        allownull: false
    },
    lastName: {
        type: String,
        required: [true, 'Last name is Required'],
        allownull: false
    },
    email: {
        type: String,
        required: [true, 'Email Is Required'],
        unique: true,
        allownull: false,
        lowercase: true
    },
    password: {
        type: String,
        allownull: false,
        trim: true,
        select: false
    },
    passwordChangedAt: {
        type: Date,
        default: null,
      
    },
    contactNumber: {
        type: Number,
        trim: true,
        minlength: [10, 'Contact Number Must Atleast Contain Minimum 10 Digits']
    },
    education: {
        type: String,
        trim: true
    },
    dob: {
        type: Date,
        // required: true['Date Of Birth Is Required']
    },
    doj: {
        type: Date,
        // required: true['Date Of Joining Is Required']
    },
    employeeCode: {
        type: String,
        trim: true,
        unique: true,
        required: true['Employee Code Is Required']
    },
    employeeDesignation: {
        type: String,
        trim: true
    },
    previousCompanyName: {
        type: String,
        trim: true
    },
    permanentAddress: {
        type: String,
        trim: true
    },
    currentAddress: {
        type: String,
        trim: true
    },
    currentCity: {
        type: String,
        // default: 'Indore',
        trim: true
    },
    postalCode: {
        type: Number,
        // default: 452010,
        trim: true
    },
    employeeRole: {
        type: String,
        // default: 'Admin'
    },
    avatar: {
        type: String,
        default: null
    },
    isActive: {
        type: Number,
        default: 0 // 0 Means Employee Is  Offline Or Not Logged In
    },
    isDeleted: {
        type: Number,
        default: 1 // 1 Means Not Deleted
    },
    adharCardAttachment: [String],
    panCardAttachment: [String],
    otherAttachment: [String],
    createdAt: {
        type: Date,
        default: Date.now()
    },
    refreshToken: {
        type: String,
        default: null
    },
    gender: {
        type: String,
        // default: 'Male'
    }

})

// MONGOOSE DOCUMENT MIDDLEWARES
EmployeeSchema.pre('save', async function (next) {
    // if (!this.isModified('password')) return next(); // Runs Only when Password Is Modified
    var password = generator.generate({
        length: 15,
        numbers: true
    });
    this.password = await bcrypt.hash(password, 12); // Hash The Password With Cost of 12(Salt)

    // Sending Email And AutoGenerated Password To Employees Email ID
    const transporter = mailer.createTransport({
        service: "gmail",
        auth: {
            user: process.env.EMAIL,
            pass: process.env.PASSWORD,
        },
    });

    let emailbody = {
        from: process.env.EMAIL,
        to: this.email,
        subject: "Welcome To Intelliatech Portal",
        attachments: [
            {
                filename: "image.png",
                path: "./public/images/intellia_logo.png",
                cid: "intellia_logo", //same cid value as in the html img src
            },
        ],
        html: `<p>Hi <b>${this.firstName.toUpperCase()} ${this.lastName.toUpperCase()}</b></p>
                      <p>Your username is <span style="color:blue;">${this.email}</span> and Password is <span style="color:blue;">${password}</span></p>
                      <p>Please use this username And password to login into your account </p>
                      <img width="350px" height="100" src="cid:intellia_logo">`,
    };
    transporter.sendMail(emailbody, (err, result) => {
        if (err) {
            console.log(err);
            return false;
        }
    });
    next();
})


// METHODS OR FUNCTIONS
// 1) THIS METHOD IS USED TO VERIFY THE CURRENT PASSWORD WITH THE EXISTING PASSWORD FROM DATABASE
EmployeeSchema.methods.correctPassword = async function (candidatePassword, userPassword) {
    return await bcrypt.compare(candidatePassword, userPassword) // will Return true or False(BCRYPT is an ASYNC Function So Used async and await)
}

// EmployeeSchema.methods.changePasswordAfter = function (JWTTimeStamp) {
//     if (this.passwordChangedAt) {
//         const changedTimeStamp = parseInt(this.passwordChangedAt.getTime() / 1000, 10);
//         return JWTTimeStamp < changedTimeStamp
//     }
//     // False Means Password Not Changed
//     return false;
// }

const Employee = mongoose.model('Employee', EmployeeSchema)

module.exports = Employee;